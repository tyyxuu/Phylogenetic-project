7+20
install.packages("adegenet", dep=TRUE)
install.packages("phangorn", dep=TRUE)
library(ape)
library(adegenet)
dna <- fasta2DNAbin(file="http://adegenet.r-forge.r-project.org/files/usflu.fasta")
library(phangorn)
D <- dist.dna(dna, model="TN93")
tre <- nj(D)
tre <- ladderize(tre)
title("A simple NJ tree")
plot(tre, cex=.6)
title("A simple NJ tree")
dna2 <- as.phyDat(dna)
tre.ini <- nj(dist.dna(dna,model="raw"))
parsimony(tre.ini, dna2)
> tre.pars <- optim.parsimony(tre.ini, dna2)
tre.pars <- optim.parsimony(tre.ini, dna2)
plot(tre.pars, cex=0.6)
library(ape)
library(phangorn)
dna <- fasta2DNAbin(file = "https://raw.githubusercontent.com/tyyxuu/Phylogenetic-project/main/Phylogenetic%20project%20dataset/ITS1-region-aligned.fasta")
print(dna)
print(dna)
D <- dist.dna(dna, model="TN93")
tre <- nj(D)
D <- dist.dna(dna, model="TN93")
tre <- nj(D)
dna <- dna[apply(as.character(dna), 1, function(x) sum(x == "-") / length(x)) < 0.5, ]
tre <- nj(D)
dna <- fasta2DNAbin(file = "https://raw.githubusercontent.com/tyyxuu/Phylogenetic-project/main/Phylogenetic%20project%20dataset/ITS1-region-aligned.fasta")
table(as.character(dna))
dna <- dna[apply(as.character(dna), 1, function(x) sum(x == "-") / length(x)) < 0.5, ]
dna[dna == "-" | dna == "n"] <- NA
D <- dist.dna(dna, model="raw", pairwise.deletion=TRUE)
tre <- tryCatch(nj(D), error = function(e) njs(D))
plot(tre, cex=0.6)
title("Neighbor-Joining Tree")
library(ape)
library(phangorn)
dna <- fasta2DNAbin(file = "https://raw.githubusercontent.com/tyyxuu/Phylogenetic-project/main/Phylogenetic%20project%20dataset/ITS1-region-aligned.fasta")
# Load necessary libraries
library(ape)       # For phylogenetic tree handling
library(phangorn)  # For Maximum Parsimony analysis
# Load aligned DNA sequences
dna <- fasta2DNAbin(file = "https://raw.githubusercontent.com/tyyxuu/Phylogenetic-project/main/Phylogenetic%20project%20dataset/ITS1-region-aligned.fasta")
# Convert DNA sequences into phyDat format (required for parsimony)
dna_phy <- as.phyDat(dna)
# Generate an initial tree using Neighbor-Joining (NJ) with raw distances
D <- dist.dna(dna, model="raw", pairwise.deletion=TRUE)
tre_ini <- nj(D)  # Initial NJ tree
# Load necessary libraries
library(ape)       # For phylogenetic tree construction and visualization
library(phangorn)  # For parsimony analysis
# Load aligned DNA sequences from GitHub
dna <- fasta2DNAbin(file = "https://raw.githubusercontent.com/tyyxuu/Phylogenetic-project/main/Phylogenetic%20project%20dataset/ITS1-region-aligned.fasta")
# Print dataset info to verify successful import
print(dna)
# Compute initial genetic distance matrix using TN93 model
D <- dist.dna(dna, model="TN93")
# Check for nucleotide composition and gaps
table(as.character(dna))
# Remove sequences that have more than 50% gaps
dna <- dna[apply(as.character(dna), 1, function(x) sum(x == "-") / length(x)) < 0.5, ]
# Convert DNA sequences to phyDat format (needed for parsimony)
dna_phy <- as.phyDat(dna)
# Compute pairwise distances using raw model (ignoring missing data)
D <- dist.dna(dna, model="raw", pairwise.deletion=TRUE)
# Generate an initial tree using Neighbor-Joining (NJ)
tre_ini <- tryCatch(nj(D), error = function(e) njs(D))
# Optimize the tree using Maximum Parsimony
tre_pars <- optim.parsimony(tre_ini, dna_phy)
# Perform bootstrap analysis with 100 replicates
set.seed(123)  # Ensures reproducibility
bootstrap_trees <- boot.phylo(tre_pars, dna_phy, FUN = function(x) optim.parsimony(tre_ini, x), B = 100)
# Load required libraries
library(ape)       # For phylogenetic tree handling
library(phangorn)  # For Maximum Parsimony analysis
# Load aligned DNA sequences from GitHub
dna <- fasta2DNAbin(file = "https://raw.githubusercontent.com/tyyxuu/Phylogenetic-project/main/Phylogenetic%20project%20dataset/ITS1-region-aligned.fasta")
# Check nucleotide composition and gaps
table(as.character(dna))
# Remove sequences that have more than 50% gaps
dna <- dna[apply(as.character(dna), 1, function(x) sum(x == "-") / length(x)) < 0.5, ]
# Convert DNA sequences to phyDat format (needed for parsimony)
dna_phy <- as.phyDat(dna)
# Generate an initial tree using Neighbor-Joining (NJ)
D <- dist.dna(dna, model="raw", pairwise.deletion=TRUE)
tre_ini <- tryCatch(nj(D), error = function(e) njs(D))
# Optimize the tree using Maximum Parsimony
tre_pars <- optim.parsimony(tre_ini, dna_phy)
# Perform bootstrap analysis with 100 replicates using bootstrap.phyDat()
set.seed(123)  # Ensures reproducibility
bootstrap_trees <- bootstrap.phyDat(dna_phy, FUN = function(x) optim.parsimony(tre_ini, x), bs = 100)
# Compute a majority-rule consensus tree from bootstrap replicates
tre_consensus <- consensus(bootstrap_trees)
# Plot the optimized parsimony tree with bootstrap values and colors
plot(tre_consensus, cex=0.8, edge.color="blue", tip.color="red", edge.width=2)  # Custom colors
# Add bootstrap support values
nodelabels(bootstrap_trees, frame="none", cex=0.7, col="black")
# Add title
title("Parsimony Tree with Bootstrap Support & Colors")
# Load necessary libraries
library(ape)
library(phangorn)
# Load aligned DNA sequences
dna <- fasta2DNAbin(file = "https://raw.githubusercontent.com/tyyxuu/Phylogenetic-project/main/Phylogenetic%20project%20dataset/ITS1-region-aligned.fasta")
# Convert DNA to phyDat format for parsimony analysis
dna_phy <- as.phyDat(dna)
# Remove sequences with excessive gaps (>50% missing data)
dna <- dna[apply(as.character(dna), 1, function(x) sum(x == "-") / length(x)) < 0.5, ]
# Generate an initial tree using Neighbor-Joining (NJ)
D <- dist.dna(dna, model="raw", pairwise.deletion=TRUE)
tre_ini <- tryCatch(nj(D), error = function(e) njs(D))
# Optimize the tree using Maximum Parsimony
tre_pars <- optim.parsimony(tre_ini, dna_phy)
# Load required libraries
library(ape)       # For phylogenetic tree handling
library(phangorn)  # For Maximum Parsimony analysis
# Load aligned DNA sequences from GitHub
dna <- fasta2DNAbin(file = "https://raw.githubusercontent.com/tyyxuu/Phylogenetic-project/main/Phylogenetic%20project%20dataset/ITS1-region-aligned.fasta")
# Check nucleotide composition and gaps
table(as.character(dna))
# Remove sequences that have more than 50% gaps
dna <- dna[apply(as.character(dna), 1, function(x) sum(x == "-") / length(x)) < 0.5, ]
# Convert DNA sequences to phyDat format (needed for parsimony)
dna_phy <- as.phyDat(dna)
# Generate an initial tree using Neighbor-Joining (NJ)
D <- dist.dna(dna, model="raw", pairwise.deletion=TRUE)
tre_ini <- tryCatch(nj(D), error = function(e) njs(D))
# Optimize the tree using Maximum Parsimony
tre_pars <- optim.parsimony(tre_ini, dna_phy)
# Perform bootstrap analysis with 100 replicates using bootstrap.phyDat()
set.seed(123)  # Ensures reproducibility
bootstrap_trees <- bootstrap.phyDat(dna_phy, FUN = function(x) optim.parsimony(tre_ini, x), bs = 100)
# Compute a majority-rule consensus tree from bootstrap replicates
tre_consensus <- consensus(bootstrap_trees)
# Plot the optimized parsimony tree with bootstrap values and colors
plot(tre_consensus, cex=0.8, edge.color="blue", tip.color="red", edge.width=2)  # Custom colors
# Add bootstrap support values
nodelabels(bootstrap_trees, frame="none", cex=0.7, col="black")
# Add bootstrap support values
nodelabels(bootstrap_trees, frame="none", cex=0.7, col="black", adj=0.5)
# Plot the optimized parsimony tree with bootstrap values and colors
plot(tre_consensus, cex=0.8, edge.color="blue", tip.color="red", edge.width=2)  # Custom colors
# Add bootstrap support values
nodelabels(bootstrap_trees, frame="none", cex=0.7, col="black", adj=0.5)
# Add title
title("Parsimony Tree with Bootstrap Support & Colors")
bootstrap_reps <- bootstrap.phyDat(dna_phy, FUN = function(x) optim.parsimony(tre_ini, x), bs = 100)
# Compute a Majority-Rule Consensus Tree from bootstrap replicates
tre_consensus <- consensus(bootstrap_reps)
# Extract Bootstrap Values for Nodes
bootstrap_values <- prop.clades(tre_consensus, bootstrap_reps) * 100  # Convert to percentage
# **Make sure the tree is ladderized and properly spaced**
tre_consensus <- ladderize(tre_consensus)
# **Plot the tree with improved spacing and readability**
plot(
tre_consensus,
cex=0.8,                # Increase text size slightly
edge.color="blue",      # Color edges for better contrast
tip.color="red",        # Color tip labels
edge.width=2,           # Make branches thicker for readability
label.offset=0.05       # Increase label spacing from the tree
)
# **Improve Bootstrap Label Placement**
nodelabels(
text = bootstrap_values,  # Use properly extracted bootstrap values
frame = "none",           # No frame for clarity
cex = 0.6,                # Smaller text to prevent overlapping
col = "black",            # Set color for better contrast
adj = c(1.2, -0.5)        # Adjust horizontal/vertical position
)
# Add a title
title("Clean Parsimony Tree with Bootstrap Support & Colors")
# Extract Bootstrap Values for Nodes
bootstrap_values <- prop.clades(tre_consensus, bootstrap_reps)  # Convert to percentage
bootstrap_values[bootstrap_values < 50] <- NA
# **Make sure the tree is ladderized and properly spaced**
tre_consensus <- ladderize(tre_consensus)
# **Plot the tree with improved spacing and readability**
plot(
tre_consensus,
cex=0.8,                # Increase text size slightly
edge.color="blue",      # Color edges for better contrast
tip.color="red",        # Color tip labels
edge.width=2,           # Make branches thicker for readability
label.offset=0.05       # Increase label spacing from the tree
)
# **Improve Bootstrap Label Placement**
nodelabels(
text = bootstrap_values,  # Use properly extracted bootstrap values
frame = "none",           # No frame for clarity
cex = 0.6,                # Smaller text to prevent overlapping
col = "black",            # Set color for better contrast
adj = c(1.2, -0.5)        # Adjust horizontal/vertical position
)
# Add a title
title("Clean Parsimony Tree with Bootstrap Support & Colors")
library(ape)
library(phangorn)
dna <- fasta2DNAbin(file = "https://raw.githubusercontent.com/tyyxuu/Phylogenetic-project/main/Phylogenetic%20project%20dataset/ITS1-region-aligned.fasta")
print(dna)
D <- dist.dna(dna, model="TN93")
table(as.character(dna))
dna <- dna[apply(as.character(dna), 1, function(x) sum(x == "-") / length(x)) < 0.5, ]
D <- dist.dna(dna, model="raw", pairwise.deletion=TRUE)
tre <- tryCatch(nj(D), error = function(e) njs(D))
plot(tre, cex=0.6)
title("Neighbor-Joining Tree")
library(ape)
library(ggtree)
install.packages("ggtree", repos="http://bioconductor.org/packages/release/bioc")  # For advanced visualization
library(ggtree)
install.packages("BiocManager")
BiocManager::install("ggtree")
BiocManager::install("treeio")
BiocManager::install("phyloseq")
library(ggtree)
library(ape)
tree_text <- "HF969276.1:0.0000010000,(HF969275.1:0.0000010000,(((((AJ810438.1:0.0000010000,AJ810439.1:0.0000010000):0.0064751547,(AJ810436.1:0.0550852309,KX192120.1:0.0000010000):0.0201702160):0.0000010000,HF969272.1:0.0000010000):0.0019345292,HF969273.1:0.0032057604):0.0057064885,(HF969271.1:0.0927185869,LC600963.1:0.0447751463):0.0063284464):0.0202766067):0.0016996135,(HF969274.1:0.0000010000,HF969277.1:0.0000010000):0.0000010000);"
tree <- read.tree(text = tree_text)
tree_text <- "HF969276.1:0.0000010000,(HF969275.1:0.0000010000,(((((AJ810438.1:0.0000010000,AJ810439.1:0.0000010000):0.0064751547,(AJ810436.1:0.0550852309,KX192120.1:0.0000010000):0.0201702160):0.0000010000,HF969272.1:0.0000010000):0.0019345292,HF969273.1:0.0032057604):0.0057064885,(HF969271.1:0.0927185869,LC600963.1:0.0447751463):0.0063284464):0.0202766067):0.0016996135,(HF969274.1:0.0000010000,HF969277.1:0.0000010000):0.0000010000);"
cat(tree_text)
tree <- read.tree(text = tree_text)
library(ape)
